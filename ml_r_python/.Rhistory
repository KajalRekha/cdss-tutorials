plot(fit)
fit <- stl(bitcoin[,"Weighted.Price"], t.window = 14, s.window=10, robust = TRUE)
plot(fit)
fit <- stl(bitcoin[,"Weighted.Price"], t.window = 1, s.window=10, robust = TRUE)
plot(fit)
fit <- stl(bitcoin[,"Weighted.Price"], t.window = 100, s.window=10, robust = TRUE)
plot(fit)
library("fpp", lib.loc="C:/Users/Eli/Documents/R/win-library/3.0")
library("TTR", lib.loc="C:/Users/Eli/Documents/R/win-library/3.0")
oil <-data(oil)
oil <-data(oil, package="fpp")
data(oil, package="fpp")
data(oil, package="fpp")
oil
plot(oil)
ema = EMA(oil, 3)
ema
lines(ema, col="red")
library("Quandl", lib.loc="C:/Users/Eli/Documents/R/win-library/3.0")
data <- Quandl(GOOG/NASDAQ_TSLA)
library(Quandl)
wages <- Quandl(ECPI/WAGE_EDU)
wages <- Quandl(ECPI/WAGE_EDU)
wages <- read.csv('http://www.quandl.com/api/v1/datasets/ECPI/WAGE_EDU.csv?&trim_start=1973-01-01&trim_end=2007-01-01&sort_order=desc', colClasses=c('Year'='Date'))
?rowSum
rowMeans(wages)
View(wages)
wages <- read.csv('http://www.quandl.com/api/v1/datasets/ECPI/WAGE_EDU.csv?&trim_start=1973-01-01&trim_end=2007-01-01&sort_order=asc', colClasses=c('Year'='Date'))
View(wages)
View(wages)
gdp.growth <- Quandl("WORLDBANK/USA_NY_GDP_MKTP_KD_ZG",start_date=1969-01-01,end_date=2006-01-01, order="asc")
gdp.growth <- Quandl("WORLDBANK/USA_NY_GDP_MKTP_KD_ZG",start_date=1969-01-01,end_date=2006-01-01,"asc")
gdp.growth <- Quandl("WORLDBANK/USA_NY_GDP_MKTP_KD_ZG","raw",start_date=1969-01-01,end_date=2006-01-01,"asc")
gdp.growth <- read.csv('http://www.quandl.com/api/v1/datasets/WORLDBANK/USA_NY_GDP_MKTP_KD_ZG.csv?&trim_start=1969-12-31&trim_end=2006-12-31&sort_order=asc', colClasses=c('Date'='Date'))
View(gdp.growth)
gdp.growth <- gdp.growth[,-1]
fix(gdp.growth)
cbind(wages,gdp.growth)
fix(gdp.growth)
gdp.growth <- read.csv('http://www.quandl.com/api/v1/datasets/WORLDBANK/USA_NY_GDP_MKTP_KD_ZG.csv?&trim_start=1969-12-31&trim_end=2006-12-31&sort_order=asc', colClasses=c('Date'='Date'))
View(gdp.growth)
gdp.growth <- read.csv('http://www.quandl.com/api/v1/datasets/WORLDBANK/USA_NY_GDP_MKTP_KD_ZG.csv?&trim_start=1972-12-31&trim_end=2006-12-31&sort_order=asc', colClasses=c('Date'='Date'))
gdp.growth <- gdp.growth[,-1]
cbind(wages,gdp.growth)
wages < - cbind(wages,gdp.growth)
wages.gdp <- cbind(wages[,-1],gdp.growth)
View(wages.gdp)
View(wages.gdp)
plot(wages[,"gdp.growth"],wages[,"College"])
wages[,"gdp.growth"]
plot(wages.gdp[,"gdp.growth"],wages.gdp[,"College"])
fit <- lm(wages.gdp, College ~ gdp.growth)
fit <- lm(College ~ gdp.growth,wages.gdp)
summary(fit)
fit <- lm(High.School ~ gdp.growth,wages.gdp)
summary(fit)
library(ggplot2)
wages$1
plot(wages.gdp[,"gdp.growth"],wages.gdp[,"High.School"])
plot(wages.gdp[,"gdp.growth"],wages.gdp[,"Advanced.Degree"])
plot(wages.gdp[,"gdp.growth"],wages.gdp[,"Some.College"])
plot(wages.gdp[,"gdp.growth"],wages.gdp[,"Less.Than.High.School"])
plot(wages.gdp[,"gdp.growth"],wages.gdp[,"Less.than.High.School"])
fit <- lm(Less.than.High.School ~ gdp.growth,wages.gdp)
summary(fit)
rep(4,10)
rep(4,10).shape
rep(4,10).shape()
shape(rep(4,10))
dim(rep(4,10))
dim(cbind((1,2,3,4),(3,4,5,33))
dim(cbind((1,2,3,4),(3,4,5,33)))
cbind((1,2,3,4),(3,4,5,33))
cbind(c(1,2,3,4),c(3,4,5,33))
dim(cbind(c(1,2,3,4),c(3,4,5,33)))
dim(cbind(c(1,2,3,4),c(3,4,5,33)))[1]
as.vector(rep(4,10))
is.vector(rep(4,10))
rep(4,2) %*% cbind(c(1,0),c(0,1))
rep(4,2) %*% c(1,0)
c(1,-1,1) == c(1,1,1)
c(3,3,3) %*% (c(1,-1,1) == c(1,1,1))
c(3,3,3) %*% (c(1,-1,1) != c(1,1,1))
sum(c(3,3,3))
c(3,3,3) %*% c(1,1,1)
rep(0,3)
rep(0,3)[1]
rep(0,3)[3]
log(2)
log(2.742)
exp(c(3,2,1))
exp(c(0,10,1))
exp(4 * c(0,10,1))
c(1,2,3) %*% exp(4 * c(0,10,1))
c(1,2,3) * exp(4 * c(0,10,1))
vector()
vector() rbind(3,3,3)
rbind(vector(),c(3,3,3))
rbind(c(3,4,5),rbind(vector(),c(3,3,3)))
temp <- rbind(c(3,4,5),rbind(vector(),c(3,3,3)))
temp
temp[,:]
temp[,3]
temp[,::]
temp[1,]
temp[2,]
apply(temp,1, function(x){x})
apply(temp,2, function(x){x})
apply(temp,1, function(x){x[1] + x[2]})
temp
sign(-1)
sign(-100)
(80-100)/16
1- 0.10565
(90-100)/16
(112-100)/16
(132-100)/16
0.97725 - 0.77337
Y <- c(128,213,75,250,446,540)
X <- c(7,12,4,14,25,30)
x[1]
X[1]
for(i in 1:6){X[i] - Y[i]}
for(i in 1:6){print(X[i] - Y[i])}
dim(X)
length(X)
exp(1)
pi
lik <- function(beta1){
X <- c(7,12,4,14,25,30)
Y <- c(128,213,75,250,446,540)
sum <- 0
for(i in 1:length(X)){
sum <- sum + Y[i] - beta1*X[i]
}
l = (32*pi)^(-3)exp(-(1/32)sum)
return(l)
}
lik <- function(beta1){
X <- c(7,12,4,14,25,30)
Y <- c(128,213,75,250,446,540)
sum <- 0
for(i in 1:length(X)){
sum <- sum + Y[i] - beta1*X[i]
} l = (32*pi)^(-3)exp(-(1/32)sum)
return(l)
}
lik <- function(beta1){
X <- c(7,12,4,14,25,30)
Y <- c(128,213,75,250,446,540)
sum <- 0
for(i in 1:length(X)){
sum <- sum + Y[i] - beta1*X[i]
}
l = (32*pi)^(-3)exp(-(1/32)sum)
return(l)
}
lik <- function(beta1){
X <- c(7,12,4,14,25,30)
Y <- c(128,213,75,250,446,540)
sum <- 0
for(i in 1:length(X)){
sum <- sum + Y[i] - beta1*X[i]
}
return((32*pi)^(-3)exp(-(1/32)*sum))
}
lik <- function(beta1){
X <- c(7,12,4,14,25,30)
Y <- c(128,213,75,250,446,540)
sum <- 0
for(i in 1:length(X)){
sum <- sum + Y[i] - beta1*X[i]
}
#return((32*pi)^(-3)exp(-(1/32)*sum))
}
lik <- function(beta1){
X <- c(7,12,4,14,25,30)
Y <- c(128,213,75,250,446,540)
sum <- 0
for(i in 1:length(X)){
sum <- sum + Y[i] - beta1*X[i]
}
return((32*pi)^(-3)exp(-(1/32)*sum))
}
lik <- function(beta1){
X <- c(7,12,4,14,25,30)
Y <- c(128,213,75,250,446,540)
sum <- 0
for(i in 1:length(X)){
sum <- sum + Y[i] - beta1*X[i]
}
#return((32*pi)^(-3)exp(-(1/32)*sum))
}
3^2
lik <- function(beta1){
X <- c(7,12,4,14,25,30)
Y <- c(128,213,75,250,446,540)
sum <- 0
for(i in 1:length(X)){
sum <- sum + Y[i] - beta1*X[i]
}
return((32*pi)^(-3)exp(-(1/32)*sum))
}
lik <- function(beta1){
X <- c(7,12,4,14,25,30)
Y <- c(128,213,75,250,446,540)
sum <- 0
for(i in 1:length(X)){
sum <- sum + Y[i] - beta1*X[i]
}
return(sum)
}
lik <- function(beta1){
X <- c(7,12,4,14,25,30)
Y <- c(128,213,75,250,446,540)
sum <- 0
for(i in 1:length(X)){
sum <- sum + Y[i] - beta1*X[i]
}
return((32*pi)^(-3)*exp(-(1/32)*sum))
}
like(17)
lik(17)
lik(18)
lik(19)
1:6
X <- c(7,12,4,14,25,30)
Y <- c(128,213,75,250,446,540)
X * Y
sum(X*Y)
mle = sum(X*Y) / sum(X*X)
mle
1:3:.5
1:3
seq(17,19,.1)
seq(17,19,.01)
betas <- seq(17,19,.01)
seq(17,19,.01)
data <- lapply(beta,lik)
data <- lapply(beta,print)
data <- apply(beta,print)
data <- apply(beta,sum)
data <- apply(beta,FUN = sum)
data <- apply(betas,print)
data <- lapply(betas,print)
data <- lapply(betas,lik)
data
ggplot(aes(betas,data)) + geom_point()
library(ggplot2)
ggplot(aes(betas,data)) + geom_point()
data.frame(betas,data)
betas <- seq(17,19,.01)
like <- lapply(betas,lik)
data <- data.frame(betas,like)
View(data)
data <- data.frame()
data$beta <- betas
betas <- seq(17,19,.01)
like <- lapply(betas,lik)
length(betas)
length(like)
data <- data.frame(betas,like)
View(data)
data <- data.frame(betas)
data$like <- like
View(data)
likeplot <- ggplot(data, aes(betas,like)) + geom_point()
likeplot
View(data)
likeplot <- ggplot(data, aes(betas,like)) + geom_point(aes(y=like))
likeplot
likeplot <- ggplot(data=data, aes(betas,like)) + geom_point(aes(y=like))
likeplot
likeplot <- ggplot(data=data, aes(x = betas,y = like)) + geom_point()
likeplot
plot(betas,like)
lik <- function(beta1){
X <- c(7,12,4,14,25,30)
Y <- c(128,213,75,250,446,540)
sum <- 0
for(i in 1:length(X)){
sum <- sum + (Y[i] - beta1*X[i])^2
}
return((32*pi)^(-3)*exp(-(1/32)*sum))
}
#(d)
betas <- seq(17,19,.01)
#get likelihoods
like <- lapply(betas,lik)
data <- data.frame(betas)
data$like <- like
plot(betas,like)
lik(17)
lik(18)
like(19)
lik(19)
View(data)
likedata <- data.frame(betas)
likedata$like <- like
likeplot <- ggplot(data=data, aes(x = betas,y = like)) + geom_point()
likeplot
ggplot(data=likedata, aes(x = betas,y = like)) + geom_point()
ggplot(data=likedata, aes(betas,like)) + geom_point()
colnames(likedata)
ggplot(data=likedata, aes(x = betas,y = like)) + geom_point()
test <- data.frame(betas,like)
View(test)
t <- c(9,3)
like <- sapply(betas,lik)
likedata <- data.frame(betas,like)
ggplot(data=likedata, aes(x = betas,y = like)) + geom_point()
likeplot <- ggplot(data=likedata, aes(x = betas,y = like)) + geom_point()+ ggtitle("Likelihood of Betas") +
xlab("Beta") + ylab("Likelihood")
likeplot
y <- c(19.4,18.4,14.8,15.9,15.6,16.4,14.8,14.414)
x<- c(1965,1970,1975,1980,1985,1990,1995,2000,2005)
lm(y~x)
y <- c(19.4,18.4,14.8,15.9,15.6,16.4,14.8,14.4,14)
lm(y~x)
summar(lm(y~x))
summary(lm(y~x))
sqrt(.6743)
? function
)
test <- rep(0,4)
test
for(i in 1:4){test(i) <- i^2}
for(i in 1:4){test[i] <- i^2}
test
test <- 1:4^2
test
test <- (1:4)^2
test
seq(from=-3,to=3, by=.1)
x <- seq(from=-3,to=3, by=.1)
plot(x, sin(x))
pi
.0000001
sin(0000001)
sin(.0000001)
sin(.0000000001)
sin(pi - .0000000001)
library(xml)
install.packages("XML")
library(XML)
table <- readHTMLTable('http://www.cnbc.com/halftime-portfolio')
table
setwd("C:/Users/Eli/Documents/Columbia/Stats/Linear Regression/HW10")
brand <- read.table("../hw6/CH06PR05.txt")
colnames(brand) <- c("Y","X1","X2")
fit1 <- lm(Y ~ X1,data = brand)
fit12 <- lm(X1 ~ X2,data = brand)
fit2 <- lm(Y ~ X2,data = brand)
fit21 <- lm(X2 ~ X1, data = brand)
plot(fit12$resi,fit2$resi)
plot(fit12$resi,fit2$resi,xlab = "e(X1|X2)", ylab = "e(Y|X2)",
main = "Added Variable Plot for X1")
plot(fit12$resi,fit2$resi,xlab = "e(X1|X2)", ylab = "e(Y|X2)",
main = "Added Variable Plot for X1")
abline(lm(fit2$resi~fit12$resi))
#added variable plot for X2
plot(fit21$resi,fit1$resi,xlab = "e(X2|X1)", ylab = "e(Y|X1)",
main = "Added Variable Plot for X2")
abline(lm(fit1$resi~fit21$resi))
resids <- lm(Y~X1 + X2, brand)$resi
resids
X <- cbind(1,brand$X1,brand$X2)
hat <- X%*%solve(t(X)%*%X)%*%t(X)
hlist <- diag(hat)
n = dim(brand)[1]
n
ts <- resids*((n - p - 1)/(SSE*(1-hlist)-resids^2))^(1/2)
p = 3
n = dim(brand)[1]
ts <- resids*((n - p - 1)/(SSE*(1-hlist)-resids^2))^(1/2)
SSE<- sum(resids^2)
X <- cbind(1,brand$X1,brand$X2)
#get hat matrix
hat <- X%*%solve(t(X)%*%X)%*%t(X)
hlist <- diag(hat)
#get t values
ts <- resids*((n - p - 1)/(SSE*(1-hlist)-resids^2))^(1/2)
ts
max(s)
max(ts)
val <- 1-.1/(n)
t(val,n-p-1)
qt(val,n-p-1)
maxt <- max(abs(ts))
maxt > qt(val,n-p-1)
val <- 1-.1/(2*n)
maxt <- max(abs(ts))
maxt > qt(val,n-p-1)
qt(val,n-p-1)
maxt
t(.9,n-p-1)
qt(.9,n-p-1)
qt(.99,n-p-1)
maxt
val
n-p-1
qt(.99,n-p-1)
setwd("C:/Users/Eli/Documents/Columbia/CDSS/Inter R")
data <- read.table("uspsdata.txt", sep = "\t", header=FALSE)
#load labels
labels <- read.table("uspscl.txt", sep = "\t", header=FALSE)
labels
labels <- labels == 1
labels
ind <- sample(nrow(data),floor(nrow(data)/10))
ind <- sample(nrow(data),floor(nrow(data)/10))
train <- data[-ind,]
train.lab <- labels[-ind,]
test <- data[ind,]
test.lab <- labels[ind,]
rot <- function(m) t(m)[,nrow(m):1]
#Make a function to show the image
plotImg <- function(x) {
#convert from row of data frame to numeric vector
x <- as.numeric(x)
#convert to matrix
mat <- matrix(x,16,16,byrow = TRUE)
#use image function with grey scale
image(rot(mat),col = grey((0:256) / 256))
}
plotImg(data[1,])
plotImg(rot(data[1,])
)
costs <- 2^(seq(-16,-6,1))
cost
costs
linear <- tune("svm",train,train.lab,ranges = list(cost = costs),kernel = "linear",
type = "C-classification",tune.control = tune.control(
sampling = "cross",cross = 5))
library("e1071")
linear <- tune("svm",train,train.lab,ranges = list(cost = costs),kernel = "linear",
type = "C-classification",tune.control = tune.control(
sampling = "cross",cross = 5))
plot(linear, main="Linear SVM 5-Fold CV Error")
summary(linear)
cost.linear <- linear$best.model$cost
linear.final <- svm(train,train.lab,cost = cost.linear,kernel="linear",
type = "C")
summary(linear.final)
prediction <- predict(linear.final,test)
prediction
misClass.linear <- sum(prediction != test.lab) / length(test.lab)
misClass.linear
costs <- 2^(seq(-1,2,.5))
costs
cost.rbf <- 4
gamma.rbf <- 0.0001220703
rbf.final <- svm(train,train.lab,cost = cost.rbf,gamma = gamma.rbf,
kernel="radial",type = "C")
prediction <- predict(rbf.final,test)
misClass.rbf <- sum(prediction != test.lab) / length(test.lab)
misClass.rbf
misClass.linear
length(test.lab)
library('randomForest')
randForest <- randomForest(train,as.factor(train.lab),type = "C")
plot(randForest)
prediction <- predict(randForest,test)
misClass.randForest <- sum(prediction != test.lab) / length(test.lab)
misClass.randForest
sqrt(256)
? randomForest
plot(linear, main="Linear SVM 5-Fold CV Error")
plot(randForest)
set.seed(100)
sixes <- data[labels,]
plotImg(sixes[1,])
pca <- prcomp(sixes,retx=TRUE)
plot(pca,type="l")
summary(pca)
plotImg(pca$center)
plotImg(pca$rotation[,1])
plotImg(pca$rotation[,2])
plotImg(pca$rotation[,3])
plot(pca,type="l")
plotImg(pca$rotation[,3])
library(MASS)
dat <- rbind(mvrnorm(150,c(0,0),diag(2)), #mean 0, identity covariance
mvrnorm(50,c(3,3),matrix(c(1,-.5,-.5,1),ncol = 2,byrow = T)),
mvrnorm(200,c(-5,1),matrix(c(1,.8,.8,1),ncol = 2,byrow = T)))
color.true <- c(rep(1,150),rep(2,50),rep(3,200))
##plot data
plot(dat,ylab='',xlab='',col=color.true)
plot(dat,ylab='',xlab=''),#col=color.true)
plot(dat,ylab='',xlab='')#col=color.true)
clusters <- kmeans(dat,3)
plot(dat,ylab='',xlab='',col=clusters$cluster)
clusters <- kmeans(dat,3)
#plot data with clusters
plot(dat,ylab='',xlab='',col=clusters$cluster)
clusters <- kmeans(dat,3)
#plot data with clusters
plot(dat,ylab='',xlab='',col=clusters$cluster)
clusters <- kmeans(dat,5)
#plot data with clusters
plot(dat,ylab='',xlab='',col=clusters$cluster)
clusters <- kmeans(dat,5)
#plot data with clusters
plot(dat,ylab='',xlab='',col=clusters$cluster)
clusters <- kmeans(dat,5)
#plot data with clusters
plot(dat,ylab='',xlab='',col=clusters$cluster)
#try k means with more clusters
clusters <- kmeans(dat,5)
#plot data with clusters
plot(dat,ylab='',xlab='',col=clusters$cluster)
?kmeans
